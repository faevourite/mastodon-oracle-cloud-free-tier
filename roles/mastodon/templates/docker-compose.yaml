version: '3'

x-logging: &default-logging
  options:
    max-size: "50m"
    max-file: "5"
    mode: "non-blocking"
  driver: local

services:
  caddy:
    restart: unless-stopped
    build: ./caddy
    image: "caddy:{{ caddy_version }}"
    networks:
      - external_network
    ports:
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/config:/config
      - ./caddy/data:/data
      - ./caddy/logs:/logs
      - ./mastodon/public:/html/mastodon
    user: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"
    logging: *default-logging

  db:
    restart: unless-stopped
    image: postgres:14-alpine
    shm_size: 512mb
    networks:
      - internal_network
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', 'postgres' ]
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    logging: *default-logging

  redis:
    restart: unless-stopped
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
    volumes:
      - ./redis:/data
    logging: *default-logging

  # One-time setup. Uncomment and run `docker-compose run -e RAILS_ENV=production setup bundle exec rake mastodon:setup`
  # See https://docs.joinmastodon.org/admin/install/
  # Can probably also just run web and then `docker-compose exec` into it to run the setup step
  #  setup:
  #    build: ./mastodon
  #    image: "ghcr.io/mastodon/mastodon:{{ mastodon_version }}"
  #    command: "bundle exec rake mastodon:setup"
  #    environment:
  #      RAILS_ENV: production
  #    networks:
  #      - internal_network
  #      - external_network
  #    depends_on:
  #      - db
  #      - redis
  #    volumes:
  #      - ./files:/mastodon/public/system

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '127.0.0.1:9200:9200'

  web:
    build: ./mastodon
    image: "ghcr.io/mastodon/mastodon:{{ mastodon_version }}"
    restart: unless-stopped
    env_file: .env.production
    command: bundle exec puma -C config/puma.rb
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: [ 'CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1" ]
    depends_on:
      - db
      - redis
      - es
    volumes:
      - ./files:/mastodon/public/system
    logging: *default-logging

  streaming:
    build:
      dockerfile: ./streaming/Dockerfile
      context: ./mastodon
    image: "ghcr.io/mastodon/mastodon-streaming:{{ mastodon_version }}"
    restart: unless-stopped
    env_file: .env.production
    command: node ./streaming/index.js
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: [ 'CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1" ]
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis
    logging: *default-logging

  sidekiq:
    build: ./mastodon
    image: "ghcr.io/mastodon/mastodon:{{ mastodon_version }}"
    restart: unless-stopped
    env_file: .env.production
    command: "bundle exec sidekiq -c {{ sidekiq_threads }}"
    environment:
      DB_POOL: "{{ sidekiq_threads }}"
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - ./files:/mastodon/public/system
    healthcheck:
      test: [ 'CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false" ]
    logging: *default-logging

networks:
  external_network:
  internal_network:
    internal: true
