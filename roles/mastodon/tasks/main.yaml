---

- name: Create root dir
  file:
    path: "{{ root }}"
    state: directory

### BACKUPS
- name: Backups
  tags: backup
  block:
    - name: Backup directory
      file:
        path: "{{ root }}/backup"
        state: directory
        mode: '700'
    - name: Kopia directories
      file:
        path: "{{ root }}/kopia/{{ item }}"
        state: directory
        mode: '700'
      with_items:
        - 'cache'
        - 'config'
        - 'logs'
        - 'rclone'
    - name: Rclone conf
      template:
        src: "rclone.conf"
        dest: "{{ root }}/kopia/rclone/rclone.conf"
        mode: '600'
    - name: Kopia repo conf
      template:
        src: "kopia-repository.config"
        dest: "{{ root }}/kopia/config/repository.config"
        mode: '600'
    - name: Backup script
      template:
        src: backup.sh
        dest: "{{ root }}/backup.sh"
        mode: '700'
    - name: Cron backup
      cron:
        name: Mastodon backup
        job: 'cron-runner {{ root }}/backup.sh'
        hour: 5
        minute: 30

### CADDY
- name: Caddy
  become: true
  tags: caddy
  block:
    - name: Caddy top directory
      file:
        path: "{{ root }}/caddy"
        state: directory
    - name: Caddy config directory
      file:
        path: "{{ root }}/caddy/config"
        state: directory
    - name: Caddy data directory
      file:
        path: "{{ root }}/caddy/data"
        state: directory
    - name: Caddy logs directory
      file:
        path: "{{ root }}/caddy/logs"
        state: directory
    - name: Caddyfile
      template:
        src: Caddyfile
        dest: "{{ root }}/caddy/Caddyfile"
    - name: Caddy Dockerfile with Cloudflare DNS
      template:
        src: CaddyDockerfile
        dest: "{{ root }}/caddy/Dockerfile"
    - name: Recursively chown Caddy top directory
      file:
        path: "{{ root }}/caddy"
        state: directory
        recurse: true
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"

### POSTGRES
- name: Postgres directory
  tags: postgres
  file:
    path: "{{ root }}/postgres"
    state: directory

### REDIS
- name: Redis directory
  tags: redis
  file:
    path: "{{ root }}/redis"
    state: directory

### ELASTICSEARCH
- name: Elasticsearch directory
  tags: es
  file:
    path: "{{ root }}/elasticsearch"
    state: directory
    mode: '777'
# https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_set_vm_max_map_count_to_at_least_262144
- name: Elasticsearch's vm.max_map_count sysctl req
  tags: es
  become: yes
  sysctl:
    name: vm.max_map_count
    value: '262144'

### MASTODON
- name: Mastodon
  tags: mastodon
  block:
    - name: Mastodon GitHub repo directory
      git:
        repo: "https://github.com/mastodon/mastodon.git"
        dest: "{{ root }}/mastodon"
        version: "{{ mastodon_version }}"
        force: true  # Clears any patches applied below

    - name: Check for patch file
      delegate_to: localhost
      stat:
        path: "roles/mastodon/files/mastodon.patch"
      register: p
    - name: Apply patch
      when: p.stat.exists and p.stat.readable
      patch:
        src: "mastodon.patch"
        basedir: "{{ root }}/mastodon"
        strip: 1

    - name: Mastodon files directory
      file:
        path: "{{ root }}/files"
        state: directory
        mode: '777'  # Runs under its own docker user and group which ansible doesn't know about
    - name: Mastodon config file
      template:
        src: "env.production"
        dest: "{{ root }}/.env.production"

    ### DOCKER COMPOSE
    - name: Place docker-compose.yaml
      ansible.builtin.template:
        src: docker-compose.yaml
        dest: "{{ root }}/docker-compose.yaml"

    - name: Build web image
      community.docker.docker_image_build:
        name: "ghcr.io/mastodon/mastodon:{{ mastodon_version }}"
        path: "{{ root }}/mastodon"
        pull: true
        rebuild: "{{ force_image_rebuild | ternary('always', 'never') }}"
    - name: Build streaming image
      community.docker.docker_image_build:
        name: "ghcr.io/mastodon/mastodon-streaming:{{ mastodon_version }}"
        path: "{{ root }}/mastodon"
        dockerfile: streaming/Dockerfile
        pull: true
        rebuild: "{{ force_image_rebuild | ternary('always', 'never') }}"

    # New in 4.3.0: DB encryption env variables
    - name: Check db encryption envars
      register: envars_check
      failed_when: "envars_check.rc >= 2"
      shell:
        chdir: "{{ root }}"
        cmd: |
          grep -q -e 'ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=\W*\w' .env.production
    - name: Generate db encryption envars
      when: envars_check.rc != 0
      register: db_encrypt_envars
      shell:
        chdir: "{{ root }}"
        cmd: "docker-compose run --rm web bin/rails db:encryption:init | grep ACTIVE_RECORD"
    - name: Print db encryption envars
      when: envars_check.rc != 0 and db_encrypt_envars.rc == 0
      debug:
        msg: |
          Run `ansible-vault edit group_vars/mastodon/vault.yaml` and paste the following at the bottom:

          vault_ar_enc_deterministic_key: "{{ db_encrypt_envars.stdout | regex_search('ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=(.*)', '\1') | first }}"
          vault_ar_enc_key_derivation_salt: "{{ db_encrypt_envars.stdout | regex_search('ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT=(.*)', '\1') | first }}"
          vault_ar_enc_primary_key: "{{ db_encrypt_envars.stdout | regex_search('ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY=(.*)', '\1') | first }}"

          Save, exit the editor, and rerun the ansible-playbook command.
    - name: Stop if envars need setting
      when: envars_check.rc != 0 and db_encrypt_envars.rc == 0
      fail:
        msg: "See instructions above; rerun once done"

    - name: Run pre-deployment DB migrations
      tags: migrations
      shell:
        chdir: "{{ root }}"
        cmd: |
          docker-compose run --rm -e SKIP_POST_DEPLOYMENT_MIGRATIONS=true web bundle exec rails db:migrate

    - name: Start the mastodon stack
      community.docker.docker_compose_v2:
        project_src: "{{ root }}"

    - name: Run post-deployment DB migrations
      tags: migrations
      shell:
        chdir: "{{ root }}"
        cmd: |
          docker-compose run --rm web bundle exec rails db:migrate

    - name: Deploy and reindex Elasticsearch
      tags: [ es, migrations ]
      shell:
        chdir: "{{ root }}"
        cmd: |
          docker-compose run --rm web tootctl search deploy --reset-chewy
      # A couple of reties, since the elasticsearch container can take a little while to start
      register: esresult
      until: esresult is not failed
      retries: 2
      delay: 5

    - name: Place cleanup script
      template:
        src: "cleanup.sh"
        dest: "{{ root }}/cleanup.sh"
        mode: '700'
    - name: Schedule cleanup
      cron:
        name: Clean up temporary data to avoid running out of disk space
        job: 'cron-runner {{ root }}/cleanup.sh'
        hour: 6
        minute: 30
